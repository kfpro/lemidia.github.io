I"B<p class="notice--warning"><strong>들어가기 전에:</strong> 크루스칼 알고리즘에는 다음의 선행지식이 필요합니다.</p>
<ul>
  <li><a href="http://localhost:4000/data%20structure/spanning-tree/">스패닝 트리와 최소 스패닝 트리</a></li>
  <li><a href="http://localhost:4000/data%20structure/unionfind/">Union Find - 서로소 집합</a></li>
</ul>

<hr />

<h1 id="크루스칼-알고리즘kruskals-algorithm">크루스칼 알고리즘(Kruskal’s Algorithm)</h1>

<p><strong>크루스칼 알고리즘(Kruskal’s Algorithm)</strong>은 연결 가중치 그래프(connected weighted graph)에서 <strong>최소 스패닝 트리(Minimum spanning tree)</strong>를 찾는 알고리즘이다. 알고리즘 과정에서 볼 때 그래프의 숲(forest)관점에서 여러개의 트리 중 서로 다른 집합의 두 트리를 연결하는 <strong>가능한 최소 가중치 간선(least possible weighted edge)</strong>을 찾는 작업을 수행한다.</p>

<p>그래프 이론에서는 <strong>그리디 알고리즘</strong>의 하나로서 알고리즘의 <strong>매 과정마다 최소 가중치 간선</strong>을 하나씩 선택해 추가하는 작업을 하면서 연결 가중치 그래프에서 <strong>최소 스패닝 트리</strong>를 찾는다. 그리하여 모든 정점을 포함하고 간선들의 서브셋인 스패닝 트리를 형성하게 하고, 생성된 스패닝 트리의 모든 간선의 <strong>가중치 합을 최소</strong>로 만든다.</p>

<p>그래프가 <strong>연결 그래프가 아니라면</strong>, 크루스칼 알고리즘은 <strong>최소 스패닝 숲(Minimum spanning forest)</strong>을 찾는다. (비 연결 그래프 내의 각 연결된 그래프에서의 최소 스패닝 트리)</p>

<h2 id="알고리즘">알고리즘</h2>

<p><strong>크루스칼 알고리즘이 어떻게 동작하는지 살펴보자.</strong></p>

<p>그래프 G가 주어졌다고 하자. (여기서는, 비 연결 그래프, 연결 그래프 구분하지 않는다.)</p>

<ul>
  <li>
    <p>그래프 G의 모든 정점이 분리된 트리들의 집합인 숲(Forest) F를 생성한다.<br />
여기서 숲은 분리된 트리들의 집합이다. (a set of trees)</p>
  </li>
  <li>
    <p>그래프 G의 모든 간선을 포함하는 집합 S를 생성한다.</p>
  </li>
  <li>while 집합 S가 공집합이 아니고 &amp;&amp; 숲 F가 스패닝 트리가 아니면
    <ul>
      <li>집합 S에서 가장 최소 가중치의 간선을 하나 선택하고 S로 부터 삭제한다.</li>
    </ul>
  </li>
  <li>선택된 간선이 서로 다른 두 트리를 연결한다면 숲 F에 선택된 간선을 추가한다.
 이것은 두 트리를 하나의 트리로 합치는 것이다.
if the removed edge connects two different trees then add it to the forest F, combining two trees into a single tree</li>
</ul>
:ET