I"J1<h1 id="트리tree">트리(Tree)</h1>

<p>트리는 부모와 자식간의 관계가 계층적으로 구성되는 자료구조이다.<br />
하나의 노드가 여러개의 자식들을, 다시 자식들은 다른 자식들을 가질 수 있는 구조이다.</p>

<p>다음 그림은 전형적인 트리를 보여준다.</p>

<p><img src="/assets/images/tree1.png" alt="Alt text" width="500px" height="300px" /></p>

<h2 id="트리-용어">트리 용어</h2>
<p>트리에 쓰이는 용어들을 알아보자.</p>

<h3 id="루트root">루트(Root)</h3>
<p>트리의 계층적 구조상 가장 위에 위치한 노드를 지칭한다.<br />
위의 그림에서 A가 루트이다.</p>

<p class="notice--info">루트는 유일하게 부모 노드가 없는 노드이다.</p>

<h3 id="리프-노드reaf-node">리프 노드(Reaf Node)</h3>
<p>아무런 자식도 가지지 않는 노드를 리프 노드라고 한다.<br />
위의 그림에서 E, F, C, G, H가 리프 노드이다.</p>

<h3 id="조상-노드ancestor">조상 노드(Ancestor)</h3>
<p>특정 노드에서 루트로의 선행자가 이에 해당한다.<br />
노드 F의 조상 노드는 B, A가 된다.</p>

<h3 id="형제-노드sibling">형제 노드(Sibling)</h3>
<p>같은 부모를 가지는 노드들을 형제 노드라고 한다.<br />
위의 그림에서 B, C, D가 형제 노드이다.</p>

<h3 id="서브-트리sub-tree">서브 트리(Sub Tree)</h3>
<p>위의 그림에서 A가 null이 아니면, 그 밑의 자식 트리 T1, T2, T3를 노드 A의 서브 트리라고 한다.</p>

<h3 id="레벨level">레벨(Level)</h3>
<p>트리는 계층적 구조로서 레벨을 가지고 있다.<br />
루트는 0레벨이며, 밑 자식으로 갈수록 레벨이 1씩 커진다.</p>

<h1 id="이진-트리">이진 트리</h1>

<p>한 노드가 최대 2개의 자식 노드를 가질 수 있는 트리를 이진 트리라고 한다.<br />
한 노드의 왼쪽에 오는 자식을 왼쪽 자식 노드, 오른쪽에 오는 자식을 오른쪽 자식 노드라고 부른다.</p>

<p><img src="/assets/images/tree2.png" alt="Alt text" width="500px" height="300px" /></p>

<h2 id="이진-트리-표현">이진 트리 표현</h2>

<p>이진 트리를 어떻게 표현하고 구현할 수 있을지 알아본다.</p>

<p>이진 트리 클래스는 최상위 노드를 가리키는 root 레퍼런스를 갖고 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BinaryTree</span> 
<span class="o">{</span> 
    <span class="c1">// Root of Binary Tree </span>
    <span class="nc">Node</span> <span class="n">root</span><span class="o">;</span> 
  
    <span class="c1">// Constructors </span>
    <span class="nc">BinaryTree</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">key</span><span class="o">);</span> 
    <span class="o">}</span> 
  
    <span class="nc">BinaryTree</span><span class="o">()</span> 
    <span class="o">{</span> 
        <span class="n">root</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="o">}</span> 
<span class="o">}</span>
</code></pre></div></div>

<p>또한 이진 트리 클래스는 각 노드를 표현할 노드 클래스를 가지고 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Node</span> 
<span class="o">{</span> 
    <span class="kt">int</span> <span class="n">key</span><span class="o">;</span> 
    <span class="nc">Node</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">;</span> 
  
    <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">item</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="n">key</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span> 
        <span class="n">left</span> <span class="o">=</span> <span class="n">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="o">}</span> 
<span class="o">}</span> 
</code></pre></div></div>

<p>노드는 다음과 같은 부분으로 구성된다.</p>

<ol>
  <li>Data - 데이터를 저장하는 필드</li>
  <li>왼쪽 자식에 대한 레퍼런스</li>
  <li>오른쪽 자식에 대한 레퍼런스</li>
</ol>

<h2 id="트리-예제-코드">트리 예제 코드</h2>

<p>위의 표현들을 이용하여 트리를 만들어보고 이해해보자.</p>

<p>먼저 전체 코드이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Class containing left and right child of current 
   node and key value*/</span>
  
<span class="c1">// A Java program to introduce Binary Tree </span>
<span class="kd">class</span> <span class="nc">BinaryTree</span> 
<span class="o">{</span> 
    <span class="c1">// Root of Binary Tree </span>
    <span class="nc">Node</span> <span class="n">root</span><span class="o">;</span> 
  
    <span class="c1">// Constructors </span>
    <span class="nc">BinaryTree</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">key</span><span class="o">);</span> 
    <span class="o">}</span> 
  
    <span class="nc">BinaryTree</span><span class="o">()</span> 
    <span class="o">{</span> 
        <span class="n">root</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="o">}</span> 

    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span> 
    <span class="o">{</span> 
        <span class="kt">int</span> <span class="n">key</span><span class="o">;</span> 
        <span class="nc">Node</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">;</span> 
  
        <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">item</span><span class="o">)</span> 
        <span class="o">{</span> 
        <span class="n">key</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span> 
        <span class="n">left</span> <span class="o">=</span> <span class="n">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
        <span class="o">}</span> 
    <span class="o">}</span> 
  
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="nc">BinaryTree</span> <span class="n">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BinaryTree</span><span class="o">();</span> 
  
        <span class="cm">/*create root*/</span>
        <span class="n">tree</span><span class="o">.</span><span class="na">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> 
  
        <span class="n">tree</span><span class="o">.</span><span class="na">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> 
        <span class="n">tree</span><span class="o">.</span><span class="na">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> 
        <span class="n">tree</span><span class="o">.</span><span class="na">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span> 
    <span class="o">}</span> 
<span class="o">}</span> 
</code></pre></div></div>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BinaryTree</span> <span class="n">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BinaryTree</span><span class="o">();</span> 
</code></pre></div></div>

<p>이진 트리를 생성하는 구문이다.<br />
아직은 아무런 노드가 없으므로 root 레퍼런스는 null이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">tree</span><span class="o">.</span><span class="na">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</code></pre></div></div>
<p>노드를 할당하여 1을 넣고, 트리의 root 레퍼런스가 할당된 노드를 가리키게 한다.</p>

<p>그림으로 표현하면 다음처럼 도식화 된다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>              1 
            /   \ 
          null  null 
</code></pre></div></div>

<p>1번 노드는 루트가 되었다.<br />
1번 노드의 왼쪽, 오른쪽 자식노드는 없으므로 left, right 레퍼런스는 null이다.</p>

<p>그 다음을 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="o">.</span><span class="na">root</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> 
<span class="n">tree</span><span class="o">.</span><span class="na">root</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> 
</code></pre></div></div>
<p>노드를 할당하여 2를 넣고, 트리의 root 왼쪽 자식 레퍼런스가 할당된 노드를 가리키게 한다.
노드를 할당하여 3을 넣고, 트리의 root 오른쪽 자식 레퍼런스가 할당된 노드를 가리키게 한다.
2, 3번 노드는 아직 자식들이 없으므로 left, right 레퍼런스는 null이다.</p>

<p>그림으로 표현하면 다음과 같다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                1 
             /    \ 
            2       3 
          /   \    /  \ 
        null null null null
</code></pre></div></div>

<p>계속해서 그 다음을 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tree</span><span class="o">.</span><span class="na">root</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span> 
</code></pre></div></div>
<p>노드를 할당하여 4를 넣고, root의 왼쪽 노드의 왼쪽 자식 레퍼런스가 할당된 노드를 가리키게 한다.</p>

<p>그림으로 표현하면 다음과 같다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                    1 
                /       \ 
               2          3 
             /   \       /  \ 
            4    null  null  null 
           /   \ 
          null null 
</code></pre></div></div>

<p>4번 노드는 2번 노드의 자식이 되었다.</p>

<h2 id="references">References</h2>
<p><a href="https://www.geeksforgeeks.org/">GeeksforGeeks</a></p>
:ET