I"}<h1 id="너비우선탐색">너비우선탐색</h1>

<p>너비우선탐색(BFS)은 트리나 그래프 혹은 다른 구조 상에서 탐색을 위한 알고리즘이다. 이 알고리즘은 루트 노드를 시작으로(그래프의 경우에는 임의의 노드를 루트 노드로 정하게 된다.) 다음 레벨로 가기전에 현재 레벨에서 인접한 모든 이웃노드들을 탐색한다.</p>

<p>더 이상 탐색할 노드가 없어 백트랙 하기 전까지 가지를 따라 가능한 한 깊이 탐색하는 깊이우선탐색과는 다르게 너비우선탐색은 해당 정점에서 인접한 정점들을 모두 방문하는 레벨 탐색 즉, 깊이보다는 넓게 탐색하는 전략을 쓴다. 이를 위해 너비우선탐색은 큐(Queue) 자료구조를 이용하여 탐색 방법을 구성하게 된다.</p>

<p>시간 및 공간 복잡도 분석은 많은 응용분야에 따라 다른데, 이론적인 컴퓨터 과학 분야에서 BFS는 전체 그래프를 탐색하는데 사용되기 때문에 수행 시간은 선형인 $O(|V|+|E| )$가 된다. 공간 복잡도면을 보면 BFS는 어떤 해당 정점에서 인접 정점들의 정보를 모두 큐에 저장하기 때문에, 최악의 설정으로 하나의 정점이 다른 모든 정점과 직접 연결되어 있다면  최악 $O(|V|)$의 공간을 요구한다. ($|V|$는 정점의 수, $|E|$는 간선의 수이다.)</p>

<p>너비우선탐색(BFS)의 시간 및 공간 상한은 깊이우선탐색(BFS)과 같기 때문에, 탐색 알고리즘의 사용면에서 두 알고리즘이 만드는 정점 방문 순서의 다름과 그 복잡성을 생각해 어느 알고리즘을 사용해야 할지 생각해야한다.</p>

<h2 id="예제">예제</h2>

<p><strong>다음 트리를 보고 너비우선탐색이 어떤 것인지 이해해보자.</strong></p>

<p><img src="/assets/images/breadth-first-search0.png" alt="Alt text" width="400px" height="300px" class="align-center" /></p>

<p><strong>가정</strong></p>

<ul>
  <li>현재 방문하고 있는 정점에서 인접한 왼쪽 간선을 오른쪽 간선보다 먼저 선택한다.</li>
  <li>정점들의 방문 순서를 위해 큐 자료구조를 사용한다.</li>
  <li>정점들의 방문은 중복되지 않는다.</li>
  <li>1번 정점 부터 탐색을 시작한다.</li>
</ul>

<hr />

<p>먼저 1번 정점을 루트로 하여 탐색을 시작한다.</p>

<ol>
  <li>
    <p>1번 정점을 큐에 넣는다.<br />
<code class="highlighter-rouge">Queue: [1]</code></p>
  </li>
  <li>
    <p>1번 정점을 방문하고 1번 정점과 인접한 2, 3, 4번 정점들을 순서대로 큐에 넣는다.<br />
<code class="highlighter-rouge">Queue: [2, 3, 4]</code></p>
  </li>
  <li>
    <p>B를 방문하고 F를 탐색하기 전에 D를 먼저 탐색한다.</p>
  </li>
  <li>
    <p>D를 방문하고 D의 인접한 정점은 B이지만 이미 방문하였기에 더 이상 탐색할 곳이 없으므로, 이전 정점 B로 백트래킹 한다.</p>
  </li>
  <li>
    <p>정점 B에서 F를 탐색한다.</p>
  </li>
  <li>
    <p>F를 방문하고 아직 탐색하지 않은 인접 정점인 E를 탐색한다.</p>
  </li>
  <li>
    <p>E를 방문하고 나면 인접 정점들은 모두 방문한 상태이므로 이전 정점 F로 백트래킹 한다.</p>
  </li>
  <li>
    <p>F에서도 인접 정점들은 모두 방문한 상태이므로 이전 정점 B로 백트래킹 한다.</p>
  </li>
  <li>
    <p>B에서도 인접 정점들은 모두 방문한 상태이므로 이전 정점 A로 백트래킹 한다.</p>
  </li>
  <li>
    <p>A에서 인접한 정점 중 아직 탐색하지 않은 곳은 C이므로 C를 탐색한다.</p>
  </li>
  <li>
    <p>C를 방문하고 아직 탐색하지 않은 곳인 G를 탐색한다.</p>
  </li>
  <li>
    <p>G를 방문한다.</p>
  </li>
  <li>
    <p>G에서 인접 정점들은 모두 방문한 상태이므로 이전 정점 C로 백트래킹 한다.</p>
  </li>
  <li>
    <p>C에서 인접 정점들은 모두 방문한 상태이므로 이전 정점 A로 백트래킹 한다.</p>
  </li>
  <li>
    <p>A에서 모든 인접 정점이 방문 완료 되었으므로 DFS는 완료되었다.</p>
  </li>
</ol>
:ET