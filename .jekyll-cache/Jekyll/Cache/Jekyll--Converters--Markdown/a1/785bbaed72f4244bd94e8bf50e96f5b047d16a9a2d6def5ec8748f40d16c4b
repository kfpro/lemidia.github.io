I"%&<h1 id="recursion">Recursion</h1>
<p>컴퓨터 과학에서의 <strong>Recursion</strong>은 어떤 문제가 그 문제의 <strong>더 작은 사례의 해결</strong>에 의존해 해결되는 방법론이다. 재귀적인 문제는 반복적인 방법으로도 풀어질 수 있는데 그렇게 되기 위해선 런 타임 이전에 더 작은 사례를 식별하고 인덱스화 해야한다. 컴퓨터 과학 그리고 프로그래밍에서 Recursion은 함수가 자기 코드(own code) 안에서 <strong>자기 자신</strong>을 호출함으로 재귀적인 문제를 해결한다. Recursion은 많은 종류의 문제에서 적용될 수 있고 컴퓨터 과학에서의 중요한 이론이므로 잘 알아둘 필요가 있다.</p>

<p>대부분의 프로그래밍 언어는 함수가 자기 코드(own code) 안에서 <strong>자기 자신</strong>을 호출하는 방식으로 재귀를 지원한다. 함수적 프로그래밍 언어는 반복적인 구조를 정의하지 않으므로 오직 재귀적인 방법에만 의존해 문제를 해결한다.</p>

<p>함수안에서 자기 자신을 반복적으로 호출하는 재귀적인 방식을 사용하면 콜스택의 크기가 계속 커져 모든 호출과 연관된 입력 크기의 합과 같아질 수 있고, 이는 반복적인 방법으로 쉽게 해결이 가능한 문제의 경우 재귀를 적용했을 때의 효율성이 떨어진다는 것을 말한다. 또한 재귀적인 방법을 적용할 때 다소 큰 문제에 대해서는 tail call 같은 최적화 기술을 사용하는 것이 필수적이다.</p>

<h2 id="recursive-functions">Recursive functions</h2>

<p>컴퓨터 과학에서 어떤 문제를 재귀를 사용하여 해결하는 일반적인 방법 중의 하나는 <strong>분할 정복(Divide and conquer)</strong>이라는 것을 사용하는 것이다. 분할 정복은 어떤 문제를 같은 타입의 <strong>더 작은 문제들로 분할</strong>해 이를 해결하고 다시 합쳐 원래의 문제를 해결하는 방법론을 말한다. 문제에 따라서는 해당 문제의 더 작은 사례들이 겹칠 수가 있어 같은 문제를 반복적으로 풀지않고, 계산 시간을 절약하기 위해 더 작은 문제들의 솔루션을 저장한 <strong>동적표 또는 룩업 테이블</strong>(Dynamic table or look up table)을 구성하는데, 이를 함께 적용한 방법을 이를 <strong>동적 프로그래밍 또는 메모이제이션(dynamic programming or memoization)</strong>이라 부른다.</p>

<p>일반적으로 <strong>재귀 함수(Recursive functions)</strong>는 단순히 조건에 따라 값을 반환하는 하나 이상의 <strong>기본 또는 기저 사례들(base cases)</strong>과 자기 자신을 호출하는 하나 이상의 <strong>재귀 사례들(Recursive cases)</strong>로 구성된다. 팩토리얼을 계산을 예로 들면, 입력 값 n이 0 일때는 <code class="highlighter-rouge">0! = 1</code>의 단순히 1을 반환하는 기저 사례, 입력 값 n이 0 보다 클 때는 <code class="highlighter-rouge">n! = n(n − 1)!</code>의 재귀 사례로 구성할 수 있다.</p>

<p>재귀 함수에서의 재귀 사례는 보다 큰 입력을 단순한 입력으로 분해하는 것으로 볼 수 있다. 잘 설계된 재귀 함수에서의 각 재귀 호출은 입력 문제를 보다 단순한 사례로 분해하고 결국에는 기본 사례에 도달하게 한다. 기본 사례를 잘못 만들거나 빠드리면(missing) 재귀 함수는 무한 루프(infinity loop)에 빠질 수 있다.</p>

<h2 id="types-of-recursion">Types of recursion</h2>

<h3 id="single-recursion-and-multiple-recursion">Single recursion and multiple recursion</h3>

<p>재귀 함수가 단순히 하나의 자기 호출(single self-reference)을 가지고 있다면 단일 재귀라 부르고 여러개의 자기 호출(multiple self-references)을 가지고 있다면 다중 재귀라 부른다. 단일 재귀를 사용한 예로는 선형 탐색의 리스트 순회, 팩토리얼 계산이 있다. 이것들은 모두 하나의 재귀 사례로 행해질 수 있는 계산들이다.</p>

<p>다중 재귀를 사용한 예로는 깊이우선탐색 방식의 트리 순회를 들 수 있다. 대표적인 깊이우선탐색 방식의 트리 순회는 전위 순회, 중위 순회, 후위순회가 있으며 이들 모두는 2개의 다중 재귀 사례를 가지고 있다.</p>

<p><strong>다음은 트리 순회의 한 가지인 중위 순회의 코드이다.</strong></p>

<p>inorder 함수는 1개의 기본 사례와 2개의 재귀 사례로 구성되어 있음을 볼 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Recursive function to perform in-order traversal of the tree</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">inorder</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span>
<span class="o">{</span>
	<span class="c1">// 현재 노드가 null이면 리턴</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="c1">// 재귀적으로 왼쪽 서브트리를 탐색한다.</span>
	<span class="n">inorder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
	<span class="c1">// 현재 노드의 데이터를 출력한다. (방문)</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
	<span class="c1">// 재귀적으로 오른쪽 서브트리를 탐색한다.</span>
	<span class="n">inorder</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>단일 재귀는 대체로 다중 재귀보다 효율적이고, 일반적으로 선형 시간에 동작하고 상수적 메모리 공간을 요구하는 반복적인 계산 방법으로 대체될 수 있다. 그에 반해 다중 재귀는 지수적 시간 복잡도와 공간을 요구하고 명시적인 스택 없이는 반복적인 방법으로 대체될 수 없다.</p>

<p>다중 재귀나 반복적인 방법은 문제에 따라서 단일 재귀로 바뀔 수 있는데 피보나치 순열이 그 예이다. 피보나치 순열을 이전의 값들을 두 개의 다중 재귀를 표현하여 계산하는 것은 연속적인 두 값을 이용하여 나이브(naive)하게 반복적인 방법으로 대체될 수 있고, 이는 다시 연속적인 두 값을 단일 재귀의 매개변수로 넣음으로써 단일 재귀 방법으로 대체될 수 있다. 하지만 여기서의 단일 재귀는 일반 재귀 때 처럼 문제를 작은 사례로 분해하여 기본 사례로 가는 것이 아니라 처음부터 값을 추적해 나가는데, 이것을 역 재귀(corecursion)라고 부른다.</p>

<h2 id="recursive-programs">Recursive programs</h2>

<p><strong>Factorial</strong></p>

<p>재귀의 전형적인 예로 팩토리얼 계산을 들 수 있다.</p>

<p>$fact(n) = if(n = 0) then 1 
          else if n &gt; 0 then n * fact(n-1)$</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">function</span> <span class="n">factorial</span> <span class="n">is</span><span class="o">:</span>

<span class="n">input</span><span class="o">:</span> <span class="n">integer</span> <span class="n">n</span> <span class="n">such</span> <span class="n">that</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="mi">0</span>

<span class="n">output</span><span class="o">:</span> <span class="p">[</span><span class="n">n</span> <span class="err">×</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="err">×</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="err">×</span> <span class="err">…</span> <span class="err">×</span> <span class="mi">1</span><span class="p">]</span>


    <span class="mf">1.</span> <span class="k">if</span> <span class="n">n</span> <span class="n">is</span> <span class="mi">0</span><span class="p">,</span> <span class="k">return</span> <span class="mi">1</span>
    <span class="mf">2.</span> <span class="n">otherwise</span><span class="p">,</span> <span class="k">return</span> <span class="p">[</span> <span class="n">n</span> <span class="err">×</span> <span class="n">factorial</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">]</span>


<span class="n">end</span> <span class="n">factorial</span>
</code></pre></div></div>

<h2 id="references">References</h2>

<p><a href="https://en.wikipedia.org/wiki/Quicksort#Analysis_of_randomized_quicksort">Quick sort - wikipedia</a><br />
<a href="https://www.codingeek.com/algorithms/quick-sort-algorithm-explanation-implementation-and-complexity/">Quick sort - codingeek</a><br />
<a href="https://www.programiz.com/dsa/quick-sort">Quick sort - programiz</a></p>
:ET