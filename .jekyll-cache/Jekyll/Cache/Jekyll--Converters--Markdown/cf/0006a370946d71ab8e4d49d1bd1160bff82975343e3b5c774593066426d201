I"þ<h1 id="code">code</h1>
<p>```java script
const express = require(â€˜expressâ€™);
const router = express.Router();
const bcrypt = require(â€˜bcryptjsâ€™);
const passport = require(â€˜passportâ€™);</p>

<p>// Mongoose user model
const User = require(â€˜../models/Userâ€™);
// If user approach to /user/login
router.get(â€˜/loginâ€™, (req, res) =&gt; res.render(â€˜loginâ€™));
// If user approach to /user/register 
router.get(â€˜/registerâ€™, (req, res) =&gt; res.render(â€˜registerâ€™));</p>

<p>// Register Handle
// If POST method which is in register.ejs is executed
router.post(â€˜/registerâ€™, (req, res) =&gt; {
    const {name, email, password, password2} = req.body;
    let errors = [];
    // Check required fields
    if(!name || !email || !password || !password2){
        errors.push({msg: â€˜Please fill in all fieldsâ€™});
    }
    // Check passwords match
    if(password !== password2){
        errors.push({msg: â€˜Passwords do not matchâ€™});
    }
    // Check passwords length
    if (password.length &lt; 6) {
        errors.push({msg: â€˜Password should be at least 6 charactersâ€™});
    }
    // If not satisfied conditions are exist
    if (errors.length &gt; 0) {
        // Reload the register page.
        res.render(â€˜registerâ€™, {
            errors,
            name,
            email,
            password,
            password2
        });
    }else{
        // Validation passed
        User.findOne({ email: email}) // Find specific user in database.
        .then(user =&gt; {
            if(user){ // If user is already exists
                errors.push({ msg: â€˜Email is already registeredâ€™});
                // Reload the register page.
                res.render(â€˜registerâ€™, {
                    errors,
                    name,
                    email,
                    password,
                    password2
                });
            }else{ // If user is not exists
                const newUser = new User({
                    name: name,
                    email: email,
                    password: password
                });
                // Hash password
                bcrypt.genSalt(10, (err, salt) =&gt; // Generate salt
                 bcrypt.hash(newUser.password, salt, (err, hash) =&gt;{
                        if(err) throw err;
                        // Set password to hashed
                        newUser.password = hash;
                        //Save user
                        newUser.save() // Return promise
                        .then(user =&gt; {
                            req.flash(â€˜success_msgâ€™, â€˜You are now registered and can loginâ€™);
                            res.redirect(â€˜/users/loginâ€™);
                        }).catch(err =&gt; console.log(err));
                    }))
            }
        });
    }
});</p>

<p>// Login handle
// Login
router.post(â€˜/loginâ€™, (req, res, next) =&gt; {
    passport.authenticate(â€˜localâ€™, {
      successRedirect: â€˜/dashboardâ€™,
      failureRedirect: â€˜/users/loginâ€™,
      failureFlash: true
    })(req, res, next);
  });</p>

<p>// Logout
router.get(â€˜/logoutâ€™, (req, res) =&gt; {
    req.logout();
    req.flash(â€˜success_msgâ€™, â€˜You are logged outâ€™);
    res.redirect(â€˜/users/loginâ€™);
  });
module.exports = router;
```</p>
:ET