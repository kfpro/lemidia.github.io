I"<h1 id="수학에서-소수란">수학에서 소수란?</h1>

<p class="notice--warning"><strong>소수:</strong> 1을 제외한 수 중에서 <strong>1과 자기 자신을 제외하고 약수를 가지지 않는 수</strong>를 말합니다.</p>

<p>예)</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>예1) 2는 1과 자기 자신(2)을 제외하고는 약수를 가지지 않습니다. 소수입니다.
예2) 5는 1과 자기 자신(5)을 제외하고는 약수를 가지지 않습니다. 소수입니다.
예3) 13은 1과 자기 자신(13)을 제외하고는 약수를 가지지 않습니다. 소수입니다.
예4) 15는 1과 자기자신(15)를 제외하고도 3, 5의 약수를 가집니다. 소수가 아닙니다.
</code></pre></div></div>
<h1 id="에라토스테네스의-체">에라토스테네스의 체</h1>

<p>Sieve_of_Eratosthenes_animation:
수학에서 에라토스테네스의 체는 소수를 찾는 방법입니다.<br />
고대 그리스 수학자 에라토스테네스가 발견하였습니다.</p>

<h2 id="알고리즘">알고리즘</h2>

<p>밑의 애니메이션을 먼저 보시고 알고리즘을 읽으시면 이해가 빠를 수 있습니다.</p>

<ol>
  <li>2부터 소수를 구하고자 하는 구간의 모든 수를 나열한다. 그림에서 회색 사각형으로 두른 수들이 여기에 해당한다.</li>
  <li>2는 소수이므로 오른쪽에 2를 쓴다. (빨간색)</li>
  <li>자기 자신을 제외한 2의 배수를 모두 지운다.</li>
  <li>남아있는 수 가운데 3은 소수이므로 오른쪽에 3을 쓴다. (초록색)</li>
  <li>자기 자신을 제외한 3의 배수를 모두 지운다.</li>
  <li>남아있는 수 가운데 5는 소수이므로 오른쪽에 5를 쓴다. (파란색)</li>
  <li>자기 자신을 제외한 5의 배수를 모두 지운다.</li>
  <li>남아있는 수 가운데 7은 소수이므로 오른쪽에 7을 쓴다. (노란색)</li>
  <li>자기 자신을 제외한 7의 배수를 모두 지운다.</li>
  <li>위의 과정을 반복하면 구하는 구간의 모든 소수가 남는다.</li>
</ol>

<p><img src="/assets/images/Sieve_of_Eratosthenes_animation.gif" alt="Alt text" /></p>

<p>$11^2$ &gt; 120 이므로 11보다 작은 수의 배수들만 지워도 충분하다. 즉, 120보다 작거나 같은 수 가운데 2, 3, 5, 7의 배수를 지우고 남는 수는 모두 소수이다.</p>

<h2 id="java-code">Java Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Eratosthenes</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MAX</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="kt">boolean</span> <span class="o">[]</span> <span class="n">flag</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="no">MAX</span><span class="o">];</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">flag</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
        <span class="n">eratosthenes</span><span class="o">(</span><span class="n">flag</span><span class="o">,</span> <span class="no">MAX</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">flag</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">flag</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">" is prime number"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">eratosthenes</span><span class="o">(</span><span class="kt">boolean</span><span class="o">[]</span> <span class="n">flag</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">flag</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">;</span> <span class="n">j</span><span class="o">+=</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">flag</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
:ET