I"@S<h1 id="graph">Graph</h1>
<p>정점들과 간선들로 이루어진 집합이다.
V = Vertex, E = Edge, G = Graph</p>

<h2 id="representation">Representation</h2>
<p>그래프를 표현하는 2가지 방법을 알아본다.</p>
<h3 id="인접-행렬adjacency-matrix">인접 행렬(Adjacency matrix)</h3>

<p>2차원 행렬로 표현하는 방법.<br />
행은 출발 정점을 나타내고 열을 도착 정점을 나타낸다. 꼭짓점 x에서 꼭짓점 y로 변이 존재하면 행렬 성분 x행 y열의 값은 1이고 그렇지 않으면 0이다.</p>

<p><img src="/assets/images/graph-representations-undir.png" alt="Alt text" /></p>

<p class="notice--warning"><strong>Note:</strong> 그래프가 100개의 정점과 1개의 간선으로 이루어져 있어도, 인접행렬 표현 시 100x100 크기의 매트릭스를 써야한다. 즉, 비교적 적은 간선의 그래프를 표현하는데에는 불필요한 공간이 많이 소비된다.</p>

<h3 id="인접-리스트adjacency-list">인접 리스트(Adjacency list)</h3>
<p>인접 리스트를 이용하여 그래프를 표현하는 방법
In this representation, for each vertex in the graph, we maintain the list of its neighbors. It means, every vertex of the graph contains list of its adjacent vertices.
We have an array of vertices which is indexed by the vertex number and for each vertex v, the corresponding array element points to a singly linked list of neighbors of v.</p>

<p class="notice--warning"><strong>Note:</strong> 이번 포스트에서는 자바로 <strong>Linked List</strong>를 이용해서 큐를 구현해 본다.</p>

<h3 id="queue-node---큐-원소를-표현하기-위한-노드-클래스">Queue Node - 큐 원소를 표현하기 위한 노드 클래스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A linked list (LL) node to store a queue entry </span>
<span class="kd">class</span> <span class="nc">QNode</span> <span class="o">{</span> 
    <span class="kt">int</span> <span class="n">key</span><span class="o">;</span> 
    <span class="nc">QNode</span> <span class="n">next</span><span class="o">;</span> 
  
    <span class="c1">// constructor to create a new linked list node </span>
    <span class="kd">public</span> <span class="nf">QNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span> 
        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="o">}</span> 
<span class="o">}</span> 
</code></pre></div></div>
<h3 id="queue-node---큐를-표현하는-클래스">Queue Node - 큐를 표현하는 클래스</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Queue</span> <span class="o">{</span> 
    <span class="nc">QNode</span> <span class="n">front</span><span class="o">,</span> <span class="n">rear</span><span class="o">;</span> 
  
    <span class="kd">public</span> <span class="nf">Queue</span><span class="o">()</span> 
    <span class="o">{</span> 
        <span class="k">this</span><span class="o">.</span><span class="na">front</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">rear</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="o">}</span> 
<span class="o">}</span> 
</code></pre></div></div>
<p class="notice--warning"><strong>Note:</strong> 큐는 맨 처음 원소를 가리키는 front와 맨 끝 원소를 가리키는 rear 포인터를 가지고 있다.</p>

<h2 id="operation">Operation</h2>
<p>큐가 지원하는 연산들을 알아보자.</p>

<ul>
  <li>Enqueue: 큐의 맨 끝에 원소를 추가하는 연산.</li>
  <li>Dequeue: 큐의 맨 처음의 원소를 삭제하고 반환하는 연산. 큐가 비었으면 null을 반환한다.</li>
</ul>

<h3 id="enqueue---원소-추가-연산">Enqueue - 원소 추가 연산</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">enqueue</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span> 
    <span class="c1">// Create a new LL node </span>
    <span class="nc">QNode</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QNode</span><span class="o">(</span><span class="n">key</span><span class="o">);</span> 

    <span class="c1">// If queue is empty, then new node is front and rear both </span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">rear</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> 
        <span class="k">this</span><span class="o">.</span><span class="na">front</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">rear</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span> 
        <span class="k">return</span><span class="o">;</span> 
    <span class="o">}</span> 

    <span class="c1">// Add the new node at the end of queue and change rear </span>
    <span class="k">this</span><span class="o">.</span><span class="na">rear</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">rear</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span> 
<span class="o">}</span> 
</code></pre></div></div>
<h3 id="dequeue---원소-삭제-연산">Dequeue - 원소 삭제 연산</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">QNode</span> <span class="nf">dequeue</span><span class="o">()</span> <span class="o">{</span> 
    <span class="c1">// If queue is empty, return NULL. </span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">front</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> 
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> 

    <span class="c1">// Store previous front and move front one node ahead </span>
    <span class="nc">QNode</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">front</span><span class="o">;</span> 
    <span class="k">this</span><span class="o">.</span><span class="na">front</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">front</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 

    <span class="c1">// If front becomes NULL, then change rear also as NULL </span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">front</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> 
        <span class="k">this</span><span class="o">.</span><span class="na">rear</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="k">return</span> <span class="n">temp</span><span class="o">;</span> 
<span class="o">}</span> 
</code></pre></div></div>
<h2 id="queue-implementation---전체-코드">Queue Implementation - 전체 코드</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A linked list (LL) node to store a queue entry </span>
<span class="kd">class</span> <span class="nc">QNode</span> <span class="o">{</span> 
    <span class="kt">int</span> <span class="n">key</span><span class="o">;</span> 
    <span class="nc">QNode</span> <span class="n">next</span><span class="o">;</span> 
  
    <span class="c1">// constructor to create a new linked list node </span>
    <span class="kd">public</span> <span class="nf">QNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span> 
        <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="o">}</span> 
<span class="o">}</span> 

<span class="c1">// A class to represent a queue </span>
<span class="c1">// The queue, front stores the front node of LL and rear stores the </span>
<span class="c1">// last node of LL </span>
<span class="kd">class</span> <span class="nc">Queue</span> <span class="o">{</span> 
    <span class="nc">QNode</span> <span class="n">front</span><span class="o">,</span> <span class="n">rear</span><span class="o">;</span> 
  
    <span class="kd">public</span> <span class="nf">Queue</span><span class="o">()</span> 
    <span class="o">{</span> 
        <span class="k">this</span><span class="o">.</span><span class="na">front</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">rear</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
    <span class="o">}</span> 
  
    <span class="c1">// Method to add an key to the queue. </span>
    <span class="kt">void</span> <span class="nf">enqueue</span><span class="o">(</span><span class="kt">int</span> <span class="n">key</span><span class="o">)</span> 
    <span class="o">{</span> 
  
        <span class="c1">// Create a new LL node </span>
        <span class="nc">QNode</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QNode</span><span class="o">(</span><span class="n">key</span><span class="o">);</span> 
  
        <span class="c1">// If queue is empty, then new node is front and rear both </span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">rear</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> 
            <span class="k">this</span><span class="o">.</span><span class="na">front</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">rear</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span> 
            <span class="k">return</span><span class="o">;</span> 
        <span class="o">}</span> 
  
        <span class="c1">// Add the new node at the end of queue and change rear </span>
        <span class="k">this</span><span class="o">.</span><span class="na">rear</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span> 
        <span class="k">this</span><span class="o">.</span><span class="na">rear</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span> 
    <span class="o">}</span> 
  
    <span class="c1">// 큐에서 원소를 삭제하는 연산</span>
    <span class="nc">QNode</span> <span class="nf">dequeue</span><span class="o">()</span> 
    <span class="o">{</span> 
        <span class="c1">// If queue is empty, return NULL. </span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">front</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> 
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> 
  
        <span class="c1">// Store previous front and move front one node ahead </span>
        <span class="nc">QNode</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">front</span><span class="o">;</span> 
        <span class="k">this</span><span class="o">.</span><span class="na">front</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">front</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> 
  
        <span class="c1">// If front becomes NULL, then change rear also as NULL </span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">front</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> 
            <span class="k">this</span><span class="o">.</span><span class="na">rear</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> 
        <span class="k">return</span> <span class="n">temp</span><span class="o">;</span> 
    <span class="o">}</span> 
<span class="o">}</span> 
  
<span class="c1">// Driver class </span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span> 
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> 
    <span class="o">{</span> 
        <span class="nc">Queue</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Queue</span><span class="o">();</span> 
        <span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span> 
        <span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span> 
        <span class="n">q</span><span class="o">.</span><span class="na">dequeue</span><span class="o">();</span> 
        <span class="n">q</span><span class="o">.</span><span class="na">dequeue</span><span class="o">();</span> 
        <span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span> 
        <span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="mi">40</span><span class="o">);</span> 
        <span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span> 
  
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Dequeued item is "</span> <span class="o">+</span> <span class="n">q</span><span class="o">.</span><span class="na">dequeue</span><span class="o">().</span><span class="na">key</span><span class="o">);</span> 
    <span class="o">}</span> 
<span class="o">}</span> 
</code></pre></div></div>
<hr />
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Queue</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Queue</span><span class="o">();</span> 
<span class="err">빈</span> <span class="err">큐가</span> <span class="err">생성이</span> <span class="err">된다</span><span class="o">.</span> 
<span class="err">현재</span><span class="o">:</span> <span class="n">q</span> <span class="o">=</span> <span class="o">[]</span>

<span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span> 
<span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span> 
<span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">)</span><span class="err">이</span> <span class="err">들어온다</span><span class="o">.</span> 
<span class="err">현재</span><span class="o">:</span> <span class="n">q</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">];</span>

<span class="n">q</span><span class="o">.</span><span class="na">dequeue</span><span class="o">();</span> 
<span class="n">q</span><span class="o">.</span><span class="na">dequeue</span><span class="o">();</span> 
<span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">)</span><span class="err">이</span> <span class="err">나간다</span><span class="o">.</span> 
<span class="err">현재</span><span class="o">:</span> <span class="n">q</span> <span class="o">=</span> <span class="o">[];</span>

<span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span> 
<span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="mi">40</span><span class="o">);</span> 
<span class="n">q</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span> 
<span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">50</span><span class="o">)</span><span class="err">이</span> <span class="err">차례대로</span> <span class="err">들어온다</span><span class="o">.</span> 
<span class="err">현재</span><span class="o">:</span> <span class="n">q</span> <span class="o">=</span> <span class="o">[</span><span class="mi">30</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="mi">50</span><span class="o">];</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Dequeued item is "</span> <span class="o">+</span> <span class="n">q</span><span class="o">.</span><span class="na">dequeue</span><span class="o">().</span><span class="na">key</span><span class="o">);</span> 
<span class="err">디큐</span> <span class="err">연산으로</span> <span class="err">인해</span> <span class="err">맨앞의</span> <span class="mi">30</span><span class="err">이</span> <span class="err">삭제되고</span> <span class="err">반환된다</span><span class="o">.</span>
</code></pre></div></div>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Output: Dequeued item is 30
</code></pre></div></div>

<h2 id="자바가-제공하는-큐">자바가 제공하는 큐</h2>

<p>자바에서는 Queue Interface를 구현한 Linked List Class를 제공한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">큐</span> <span class="err">선언</span><span class="o">:</span>
<span class="nc">Queue</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;();</span>

<span class="err">큐</span> <span class="err">연산</span><span class="o">:</span>
<span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">();</span> <span class="c1">// 삽입 연산</span>
<span class="n">queue</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>   <span class="c1">// 삭제하고 원소 반환</span>
<span class="n">queue</span><span class="o">.</span><span class="na">peek</span><span class="o">();</span>  <span class="c1">// 큐의 맨 앞 원소 반환</span>
<span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span> <span class="c1">// 큐가 비었는지 확인</span>
</code></pre></div></div>

<h2 id="time-complexity">Time Complexity</h2>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algorithm   Average  WorstCase
Space       O(n)     O(n)
Search      O(n)     O(n)
Insert      O(1)     O(1)
Delete      O(1)     O(1)
</code></pre></div></div>

<h2 id="references">References</h2>
<p><a href="https://ko.wikipedia.org/wiki/큐_(자료_구조)">Queue - Wikipedia</a></p>

<p><a href="https://www.geeksforgeeks.org/queue-linked-list-implementation/">Queue - Geeks</a></p>
:ET