I"Ԏ<h1 id="선형구조의-탐색">선형구조의 탐색</h1>

<p>선형구조란 자료의 순서를 유일하게 결정할 수 있는 형태의 구조를 말한다. $i$번째 자료를 탐색한 다음, $i+1$번째로 탐색 해야할 자료가 유일한 형태를 의미한다. 2차원, 3차원 구조라도 순서가 일정하게 정해져 있으면 이는 선형이라고 할 수 있다.</p>

<p>선형구조는 주로 배열과 리스트의 형태로 저장된다. 일반적으로 1차원 배열에 자료를 저장하는 1차원 선형구조와 2차원 이상의 배열에 자료가 저장이 되어있는 다차원 선형구조로 나눌 수 있다.</p>

<p>선형구조의 탐색은 선형구조로 저장된 자료들 중에서 원하는 것을 찾는 작업을 말한다. 선형구조를 탐색하는 방법은 기본적으로 순차탐색과 이분탐색이 있고, 이들을 적절히 응용한 탐색법도 만들어 사용할 수 있다. 이 단원에서는 순차탐색과 이분탐색을 익히고 이를 통하여 간단한 문제를 해결하는 실습을 한다.</p>

<h2 id="순차탐색">순차탐색</h2>

<p>순차탐색은 자료의 특성에 관계없이 사용할 수 있는 일반적인 방법으로 전체탐색기법의 한 방법이다. 첫 번째 원소로부터 시작하여 한 원소씩 차례로 다음 원소를 탐색해 나가는 방법으로 자료가 $n$개 있을 때의 계산량은 $O(n)$이다.</p>

<p>탐색 순서를 그림으로 나타내면 다음과 같다.</p>

<p><img src="/assets/images/creativealgorithm42.png" alt="Alt text" width="500px" height="300px" /></p>

<p>다음은 선형탐색을 구현한 소스코드이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LinearSearch</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">linearSearch</span><span class="o">(</span><span class="kt">int</span> <span class="no">S</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">S</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="no">S</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">k</span><span class="o">)</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="no">S</span><span class="o">[]</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">linearSearch</span><span class="o">(</span><span class="no">S</span><span class="o">,</span> <span class="n">k</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="이분탐색">이분탐색</h2>

<p>이분탐색은 배열에서 중간 원소를 선택하여 찾는 값과 비교하고 중간 원소의 값이 찾는 값보다 작다면 중간 원소를 기준으로 오른쪽을 탐색, 중간 원소의 값이 찾는 값보다 크다면 중간 원소를 기준으로 왼쪽을 탐색하는 기법이다. 이 알고리즘은 오름차순이나 내림차순으로 정렬된 선형구조에서 원하는 원소를 찾는 것으로 계산량은 $O(log_2n)$이다.</p>

<p><img src="/assets/images/creativealgorithm43.png" alt="Alt text" width="500px" height="300px" /></p>

<p class="notice--info">이분탐색의 탐색순서(원은 처음 접근하는 원소이고, 사각형은 찾은 곳의 값이 찾으려는 값보다 작으면 찾는 위치, 둥근 사각형은 그 값의 반대조건일 경우에 탐색하는 위치이다. 조건의 결과에 따라 왼쪽 또는 오른쪽 중 하나를 탐색하게 된다.)</p>

<p>다음은 이분탐색을 구현한 C++ 소스코드이다.<br />
$S$에 $n$개의 원소를 입력받고, 그 중에 $k$가 있는지를 찾는 알고리즘이다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 이분탐색 - 반복</span>
<span class="cp">#include &lt;stdio.h&gt;
</span><span class="kt">int</span> <span class="n">S</span><span class="p">[</span><span class="mi">100</span><span class="p">],</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">while</span><span class="p">(</span><span class="n">s</span><span class="o">&lt;=</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// s가 e보다 작거나 같을 때 까지</span>
    <span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="n">e</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="c1">// 중간 원소</span>
    <span class="k">if</span><span class="p">(</span><span class="n">S</span><span class="p">[</span><span class="n">m</span><span class="p">]</span><span class="o">==</span><span class="n">k</span><span class="p">)</span> <span class="k">return</span> <span class="n">m</span><span class="p">;</span> <span class="c1">// 찾았다</span>

    <span class="c1">// 탐색한 원소가 찾고자 하는 원소 보다 크다</span>
    <span class="c1">//탐색한 원소의 왼쪽 배열 탐색</span>
    <span class="k">if</span><span class="p">(</span><span class="n">S</span><span class="p">[</span><span class="n">m</span><span class="p">]</span><span class="o">&gt;</span><span class="n">k</span><span class="p">)</span> <span class="n">e</span><span class="o">=</span><span class="n">m</span><span class="err">‐</span><span class="mi">1</span><span class="p">;</span> 
    <span class="c1">// 탐색한 원소가 찾고자 하는 원소 보다 작다</span>
    <span class="c1">//탐색한 원소의 오른쪽 배열 탐색</span>
    <span class="k">else</span> <span class="n">s</span><span class="o">=</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="err">‐</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// 원하는 원소를 찾지 못했다.</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span> 
  <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">find</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="err">‐</span><span class="mi">1</span><span class="p">));</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />
<p>다음은 재귀로 이분탐색을 구현한 java 소스코드이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// 이분탐색 - 재귀</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinarySearchRecur</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">S</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">100</span><span class="o">];</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="n">k</span><span class="o">;</span> <span class="c1">// 배열 크기, 찾고자 하는 원소</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">find</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">e</span><span class="o">){</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">&gt;</span> <span class="n">e</span><span class="o">)</span> <span class="c1">// 원하는 원소를 찾지 못했다</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span><span class="o">+</span><span class="n">e</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span> <span class="c1">// 중간 원소</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">S</span><span class="o">[</span><span class="n">m</span><span class="o">]</span> <span class="o">==</span> <span class="n">k</span><span class="o">)</span> <span class="c1">// 찾았다</span>
            <span class="k">return</span> <span class="n">m</span><span class="o">;</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="no">S</span><span class="o">[</span><span class="n">m</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">)</span> <span class="c1">// 탐색한 원소가 찾고자 하는 원소 보다 작다</span>
            <span class="k">return</span> <span class="nf">find</span><span class="o">(</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span> <span class="c1">//탐색한 원소의 오른쪽 배열 탐색</span>
        <span class="k">else</span>               <span class="c1">// 탐색한 원소가 찾고자 하는 원소 보다 크다</span>
            <span class="k">return</span> <span class="nf">find</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span> <span class="c1">//탐색한 원소의 왼쪽 배열 탐색</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span> <span class="c1">// n, k</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="n">k</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span> <span class="c1">// S array</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="no">S</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="no">S</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">find</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">));</span> <span class="c1">// index 반환</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/* 
Test Case
-----------
input
5 19
3 4 2 19 4

output
3
-----------
input
5 10
3 4 2 19 4

output
-1

*/</span>
</code></pre></div></div>
<hr />

<p><strong>기본적인 탐색방법을 익힐 수 있는 다음 문제들을 해결해보자.</strong></p>

<h2 id="최댓값">최댓값</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>9개의 서로 다른 자연수가 주어질 때, 이들 중 최댓값을 찾고 
그 값이 몇 번째 수 인지를 구하는 프로그램을 작성하시오.

예를 들어, 서로 다른 9개의 자연수가 각각
3, 29, 38, 12, 57, 74, 40, 85, 61 라면, 

이 중 최댓값은 85이고, 이 값은 8번째 수이다.

----------------------------------------

입력
첫째 줄부터 아홉째 줄까지 한 줄에 하나의 자연수가 주어진다. 
주어지는 자연수 는 100보다 작다.

출력
첫째 줄에 최댓값을 출력하고, 둘째 줄에 최댓값이 
몇 번째 수인지를 출력한다.

입력 예      출력 예
3          85
29         8
38
12
57
74 
40 
85 
61
</code></pre></div></div>

<p>이 문제는 자료를 1차원 배열에 저장한 후 반복문을 이용하여 전체탐색법을 구현하면 쉽게 구할 수 있다. 전체탐색을 하더라도 탐색해야할 자료의 수가 9개뿐이므로 충분히 빠른 시간 내에 해를 구할 수 있는 기본적인 문제이다.</p>

<p>따라서 반복문을 구현하는 연습을 할 수 있는 문제로 이 문제를 해결하는 방법이 다른 문제들을 해결하는 도구로 많이 활용될 수 있으므로 꼭 익혀둘 수 있도록 한다.</p>

<p>일단 먼저 문제해결 아이디어를 생각하자. 최종적으로 출력할 해를 변수 ans로 두고, 최댓값의 인덱스를 저장할 변수를 index로 설정한다.</p>

<p>먼저 모든 자료를 탐색하기 전에 ans를 모든 원소들 보다 작은 값으로 설정한다. 이 문제에서는 100 이하의 자연수가 데이터의 정의역이므로, 0으로 설정하면 된다. 다음 으로 첫 번째 자료부터 마지막 자료까지 하나씩 검사해가며 현재까지 ans보다 더 큰 값이 나타나면 ans를 갱신하고, index값도 갱신한다.</p>

<p>마지막 자료까지 탐색을 마치면, ans와 index를 출력하면 된다. 이 과정을 입출력 예를 통해서 알아보자.</p>

<p><img src="/assets/images/creativealgorithm44.png" alt="Alt text" width="700px" height="300px" /></p>

<p><img src="/assets/images/creativealgorithm45.png" alt="Alt text" width="700px" height="800px" /></p>

<p><img src="/assets/images/creativealgorithm46.png" alt="Alt text" width="700px" height="300px" /></p>

<p>이와 같이 배열을 선형으로 전체탐색을 하면서 최댓값을 구할 수 있다. 이 방법은 가장 기본적인 방법 중 하나로 다른 알고리즘에 많이 응용되는 방법이다.</p>

<p>이를 프로그램으로 구현하면 다음과 같다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt; 
#define MAXN 9
</span><span class="kt">int</span> <span class="n">ans</span><span class="p">,</span> <span class="n">A</span><span class="p">[</span><span class="n">MAXN</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">A</span><span class="o">+</span><span class="n">i</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">ans</span><span class="p">]</span><span class="o">&lt;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="n">ans</span><span class="o">=</span><span class="n">i</span><span class="p">;</span> 
  <span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">solve</span><span class="p">();</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">A</span><span class="p">[</span><span class="n">ans</span><span class="p">],</span> <span class="n">ans</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>ans, index를 하나의 변수 ans로 처리하고 있다. 그리고 9행에서 입력 받을 때 “&amp;A[i]” 대신 “A+i”를 활용하고 있다. 이러한 코딩 스타일도 자주 활용되는 방법으로 배열과 포인터를 이해하면 위와 같이 사용할 수 있음을 알 수 있다. 이와 같을 때에는 특수문자로 인한 오타의 확률도 줄일 수 있으므로 다양한 방법을 익힐 수 있도록 하자.</p>

<h2 id="3의-배수-게임">3의 배수 게임</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3의 배수 게임을 하던 정올이는 3의 배수 게임에서 잦은 실수로 
계속해서 벌칙을 받게 되었다.
3의 배수 게임의 왕이 되기 위한 마스터 프로그램을 작성해 보자.

** 3의 배수 게임이란?

여러 사람이 순서를 정해 순서대로 수를 부르는 게임이다.
만약 3의 배수를 불러야 하는 상황이라면, 그 수 대신 "박수" 를 친다.

----------------------------------------------

입력
첫 째 줄에 하나의 정수 n이 입력된다(n은 10000미만의 자연수이다.).
출력
1부터 그 수까지 순서대로 공백을 두고 수를 출력하는데, 
3 또는 6 또는 9인 경우 그 수 대신 영문 대문자 X 를 출력한다.

입력 예      출력 예
7          1 2 X 4 5 X 7
</code></pre></div></div>

<p>이 문제도 앞선 문제와 마찬가지로 단순히 반복문을 이용하여 전체탐색법으로 해결할 수 있다. 단지 이 문제는 특정 값을 찾거나 하는 것이 아니라 전체 데이터를 읽으면서 특정 자료가 있으면 변경한다는 점은 다르나 전반적으로 같은 방법으로 해결할 수 있다.
이 문제에서 특정 자료란 입력된 숫자가 3의 배수일 경우를 말한다.</p>

<p>임의의 변수 n이 3의 배수인지 판정하는 가장 일반적인 방법은 다음과 같은 방법을 이용한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n % 3 == 0
</code></pre></div></div>
<p>1부터 n까지 1씩 증가하여 탐색하면서 각 수가 3의 배수인지 판정하여 3의 배수이면 “X”를 아니면 그 수를 출력하도록 작성하면 쉽게 해결할 수 있다.</p>

<p>이 문제를 해결한 예시는 다음과 같다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt; 
</span><span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">%</span><span class="mi">3</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">"X "</span><span class="p">);</span>
    <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span> <span class="n">s</span>
  <span class="n">solve</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="linear-structure-search">linear structure search</h2>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n개로 이루어진 정수 집합에서 원하는 수의 위치를 찾으시오.

단, 입력되는 집합은 오름차순으로 정렬되어 있으며, 같은 수는 없다.

-------------------------------------------

입력
첫 줄에 한 정수 n이 입력된다.
둘째 줄에 n개의 정수가 공백으로 구분되어 입력된다.
셋째 줄에는 찾고자 하는 수가 입력된다.
(단, 2 &lt;= n &lt;= 1,000,000,
각 원소의 크기는 100,000,000을 넘지 않는다.)

출력
찾고자 하는 원소의 위치를 출력한다. 없으면 -1을 출력한다.

입력 예                       출력 예
8                          
1 2 3 5 7 9 11 15 11        7
11

3
2 5 7                       -1
3               
</code></pre></div></div>
<p>이 문제는 앞에서 다룬 이분탐색의 예제 프로그램을 거의 그대로 활용할 수 있는 문제이다.</p>

<p>이분탐색으로 풀어보자.</p>

<p><strong>이분탐색 알고리즘</strong></p>

<p>배열을 A라고 할 때, A[m] == k 인 경우와 A[m] &gt; k, A[m] &lt; k인 경우로 나누어 처리 하는 방법으로 문제를 해결할 수 있다.</p>

<p>탐색 범위를 [s, e]로 정한 다음, 이분탐색을 진행한다. (이분탐색 - 반복)</p>

<ol>
  <li><strong>s &lt;= e</strong>를 만족할 때까지(만족하지 않으면 3번으로 간다), 가운데 위치의 값을 m( (s+e)/2 )으로 설정하고 탐색 진행.</li>
  <li><strong>A[m] == k인 경우</strong>, 찾았으므로 위치를 반환한다. (예제에서는 m+1)<br />
<strong>A[m] &gt; k인 경우</strong>, 가운데 위치의 값이 찾고자 하는 값보다 크므로 탐색 범위를[s, m-1]로 하여 다시 이분탐색(1번으로 간다)<br />
<strong>A[m] &lt; k인 경우</strong>, 가운데 위치의 값이 찾고자 하는 값보다 작으므로 탐색 범위를[m+1, e]로 하여 다시 이분탐색(1번으로 간다)</li>
  <li><strong>s &gt; e</strong>인 경우, 원하는 값이 없으므로 -1을 반환한다.</li>
</ol>

<p>그림과 함께 자세한 과정을 보자.</p>

<p><img src="/assets/images/creativealgorithm47.png" alt="Alt text" width="700px" height="300px" /></p>

<p><img src="/assets/images/creativealgorithm48.png" alt="Alt text" width="700px" height="300px" /></p>

<p>위 방법을 소스코드로 작성하면 다음과 같다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">A</span><span class="p">[</span><span class="mi">1000001</span><span class="p">];</span> 
<span class="kt">int</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">m</span><span class="p">;</span> 
  <span class="k">while</span><span class="p">(</span><span class="n">s</span><span class="o">&lt;=</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">m</span><span class="o">=</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="n">e</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> 
    <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">m</span><span class="p">]</span><span class="o">==</span><span class="n">k</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> 
    <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">m</span><span class="p">]</span><span class="o">&lt;</span><span class="n">k</span><span class="p">)</span> <span class="n">s</span><span class="o">=</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> 
    <span class="k">else</span> <span class="n">e</span><span class="o">=</span><span class="n">m</span><span class="err">‐</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="err">‐</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span> 
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">A</span><span class="o">+</span><span class="n">i</span><span class="p">);</span> 
  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">k</span><span class="p">);</span> 
  <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">solve</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="err">‐</span><span class="mi">1</span><span class="p">));</span> 
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위 소스코드를 다음과 같은 재귀함수로도 만들 수 있다. 재귀함수는 매우 다양한 응용이 가능하므로 이해해두면 많은 도움이 된다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">A</span><span class="p">[</span><span class="mi">1000001</span><span class="p">];</span> 
<span class="kt">int</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="o">&gt;</span><span class="n">e</span><span class="p">)</span> 
    <span class="k">return</span> <span class="err">‐</span><span class="mi">1</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">m</span><span class="o">=</span><span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="n">e</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> 
  <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">m</span><span class="p">]</span><span class="o">==</span><span class="n">k</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> 
  <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">m</span><span class="p">]</span><span class="o">&lt;</span><span class="n">k</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">solve</span><span class="p">(</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span> 
  <span class="k">else</span>
    <span class="k">return</span> <span class="n">solve</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="err">‐</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span> 
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="n">A</span><span class="o">+</span><span class="n">i</span><span class="p">);</span> 
  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">k</span><span class="p">);</span> 
  <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">solve</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="err">‐</span><span class="mi">1</span><span class="p">));</span> 
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="references">References</h3>

<ul>
  <li>문제해결을 위한 창의적 알고리즘</li>
</ul>
:ET